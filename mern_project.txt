1) Listing : places . 
 eg) ->     *apartment
            *flat
            *villa
            *hotel etc. 



2)  //creating new Document
    let sampleListing = new Listing ({
        title : "My New Villa" , 
        description : "By the beach" , 
        price : 1200 , 
        location : "Calangute , Goa" , 
        country : "India"
    }) ; 

3)toLocaleString("en-IN") : commas (paise mein) country kae hisaab ssae laga deta h . 


POST 

1 WAY : 
app.post("/listings" , async(req , res) => {
    let {title , description , price , location , country} = req.body ; 
    let sampleListing = new Listing ({
        title : title , 
        description : description , 
        price : price , 
        location : location , 
        country : country
    }) 
    await sampleListing.save().then((res) => {
            console.log(res) ;
        }).catch((err) => {
            console.log(err) ; 
        })
})


2nd WAY : 
app.post("/listings" , async(req , res) => {
    let listing = req.body.listing ; 
    console.log(listing) ; 
    let newListing = new Listing(listing) ; 
    await newListing.save() ; 
    res.redirect("/listings") ; 
})


<input type="text" name="listing[title]" placeholder="Enter title"><br><br>
        <input type="text" name="listing[description]" placeholder="description"><br><br>
        <input type="text" name="listing[image]" placeholder="enter image/URL/Link"> <br><br>
        <input type="number" name="listing[price]" placeholder="price"> <br><br>

        listing object h 


4) NEW.js -> <div class="invalid-feedback">Invalid price</div>  
            if the input is wrong the reason will appear at the time of submission . 

            else 

            approved messege aaega

))))            SUCCESS AND FAILURE VALIDATIONS .ðŸ‘†



app.j s-> server side valiadtions -

if(!newListing.description) {
        throw new ExpressError(400 , "Description is missing!")
    }
    if(!newListing.title) {
        throw new ExpressError(400 , "Title is missing!")
    }
    if(!newListing.location) {
        throw new ExpressError(400 , "Location is missing!")
    }
    if(!newListing.country) {
        throw new ExpressError(400 , "Country is missing!")
    }
    if(!newListing.price) {
        throw new ExpressError(400 , "Price is missing!")
    }


but what if there are hundreds of feilds -> this will be too much to write . 
hence the alternative is JOI

1) JOI -> data validator for js . 
        * also identifies a problem

        eg)missing location . in listing object from req.body ;  

app.post("/listings" , wrapAsync(async(req , res , next) => {

    //in case code sae we try to add the data eg) hoppscotch but the content of body is empty 
    // if(!req.body.listing) {
    //     throw new ExpressError(400 , "send valid data for listing")
    // }

    //after JOI -> 
    // is req.body satisfying all the constraints defined in listingSchema in joi
    listingSchema.validate(req.body) ; 


    // let listing = req.body.listing ; 
    console.log(req.body.listing) ; 
    let newListing = new Listing(req.body.listing) ; 
//despite client side validations if via. code input is practised with missing fields these alerts will be displayed ; 



    // if(!newListing.description) {
    //     throw new ExpressError(400 , "Description is missing!")
    // }
    // if(!newListing.title) {
    //     throw new ExpressError(400 , "Title is missing!")
    // }
    // if(!newListing.location) {
    //     throw new ExpressError(400 , "Location is missing!")
    // }
    // if(!newListing.country) {
    //     throw new ExpressError(400 , "Country is missing!")
    // }
    // if(!newListing.price) {
    //     throw new ExpressError(400 , "Price is missing!")
    // }


    await newListing.save() ; 
    res.redirect("/listings") ;
   
    
})) ; 

7) $pull : 

___________________________________________________
NEW MODEL 

Schema : comment 
         rating
         createdAt


